
num_commands="""次のデータを昇順にソートしなさい。
次のデータを降順にソートしなさい。
次のデータから最大値を抽出しなさい。
次のデータから最小値を抽出しなさい。
次のデータの平均値を求めなさい。
次のデータの中央値を求めなさい。
次のデータの分散を求めなさい。
次のデータの標準偏差を求めなさい。
次のデータの合計を求めなさい。
次のデータのユニークな値の数を数えなさい。
次のデータの最頻値を求めなさい。
次のデータから5番目に大きい値を抽出しなさい。
次のデータから5番目に小さい値を抽出しなさい。
次のデータから重複する値を取り除きなさい。
次のデータの中で特定の値が出現する回数を数えなさい。
次のデータの中で奇数の数を数えなさい。
次のデータの中で偶数の数を数えなさい。
次のデータをグループごとに集計しなさい。
次のデータの範囲（最大値 - 最小値）を求めなさい。
次のデータから特定の条件に一致する行を抽出しなさい。
次のデータを2つの異なる列でソートしなさい。
次のデータの中で特定の文字列を含む行を抽出しなさい。
次のデータから欠損値を取り除きなさい。
次のデータの中で特定の範囲に収まる値を抽出しなさい。
次のデータのヒストグラムを作成しなさい。
次のデータをカテゴリごとにカウントしなさい。
次のデータの中で重複している行を抽出しなさい。
次のデータから特定の列を削除しなさい。
次のデータを特定の列の値でフィルタリングしなさい。
次のデータの箱ひげ図を作成しなさい。
次のデータの散布図を作成しなさい。
次のデータの時系列プロットを作成しなさい。
次のデータから特定の列の値を変更しなさい。
次のデータを新しい列を追加して更新しなさい。
次のデータから特定の列の最大値を含む行を抽出しなさい。
次のデータから特定の列の最小値を含む行を抽出しなさい。
次のデータの中で特定の値を持つ行を削除しなさい。
次のデータをピボットテーブルに変換しなさい。
次のデータの各列ごとの要約統計量を求めなさい。
次のデータから条件に一致する行のインデックスを取得しなさい。
次のデータを複数の条件でフィルタリングしなさい。
次のデータをある列を基準にして集計しなさい。
次のデータを正規化しなさい。
次のデータの相関行列を作成しなさい。
次のデータを前処理して欠損値を補完しなさい。
次のデータを変換してカテゴリカル変数をエンコードしなさい。
次のデータをランダムにシャッフルしなさい。
次のデータの特定の列に対して値をスケーリングしなさい。
次のデータの特定の列に対してラベルエンコードしなさい。
次のデータを特定の列の値でグループ化しなさい。
次のデータを別のデータとマージしなさい。
次のデータをピボットしなさい。
次のデータをスタックしなさい。
次のデータをアンスタックしなさい。
次のデータの各グループごとの合計を求めなさい。
次のデータの各グループごとの平均を求めなさい。
次のデータを新しいデータセットに分割しなさい。
次のデータの特定の列の値を基準にしてサンプリングしなさい。
次のデータの特定の列の重複をチェックしなさい。
次のデータから特定の列の欠損値の数を数えなさい。
次のデータを特定の列の値でフィルタリングして別のファイルに保存しなさい。
次のデータを読み込み、特定の条件に一致する行を新しいデータフレームに抽出しなさい。
次のデータをフィルタリングして特定の列の値の平均を求めなさい。
次のデータの中で最も頻繁に出現する値を抽出しなさい。
次のデータを特定の列の値でグループ化して要約統計量を求めなさい。
次のデータの特定の列に対して累積合計を求めなさい。
次のデータをプロットして傾向を視覚化しなさい。
次のデータを読み込み、新しい列を計算して追加しなさい。
次のデータを前処理して外れ値を検出しなさい。
次のデータの特定の列の値を条件に基づいて変換しなさい。
次のデータを読み込み、特定の列の値を基準にして新しいカテゴリを作成しなさい。
次のデータを特定の列の値を基準にして並び替えなさい。
次のデータを前処理してスケーリングし、標準化しなさい。
次のデータを読み込み、特定の列の値を基準にしてデータをグループ化しなさい。
次のデータをプロットして分布を視覚化しなさい。
次のデータを読み込み、特定の列の値の範囲を求めなさい。
次のデータを前処理して異常値を取り除きなさい。
次のデータを読み込み、新しい列を計算して追加し、元のデータと統合しなさい。
次のデータを読み込み、特定の列の値でフィルタリングし、新しいファイルに保存しなさい。
次のデータを読み込み、特定の列の値を基準にして集計しなさい。
次のデータを読み込み、特定の列の値を基準にして統計量を求めなさい。
次のデータを読み込み、特定の列の値を基準にして欠損値を補完しなさい。
次のデータを読み込み、特定の列の値を基準にして新しいデータフレームを作成しなさい。
次のデータを読み込み、特定の列の値を基準にしてランダムにサンプリングしなさい。
次のデータを読み込み、特定の列の値を基準にしてランダムにシャッフルしなさい。
次のデータを読み込み、特定の列の値を基準にして新しいカテゴリを作成しなさい。
次のデータを読み込み、特定の列の値を基準にして異常値を検出しなさい。
次のデータを読み込み、特定の列の値を基準にして新しい列を計算しなさい。
次のデータを読み込み、特定の列の値を基準にしてスケーリングしなさい。"""

str_commands="""次の文字列データをアルファベット順にソートしなさい。
次の文字列データを逆アルファベット順にソートしなさい。
次の文字列データの中で最も長い文字列を抽出しなさい。
次の文字列データの中で最も短い文字列を抽出しなさい。
次の文字列データの中で特定の文字を含む文字列を抽出しなさい。
次の文字列データの中で特定の文字で始まる文字列を抽出しなさい。
次の文字列データの中で特定の文字で終わる文字列を抽出しなさい。
次の文字列データの中で特定のサブ文字列を含む文字列を抽出しなさい。
次の文字列データの中で最も頻繁に出現する文字を抽出しなさい。
次の文字列データの中で最も少ない頻度で出現する文字を抽出しなさい。
次の文字列データを大文字に変換しなさい。
次の文字列データを小文字に変換しなさい。
次の文字列データの中で特定のサブ文字列を含む文字列の数を数えなさい。
次の文字列データの中で特定の文字の出現回数を数えなさい。
次の文字列データの中で特定の文字で始まる文字列の数を数えなさい。
次の文字列データの中で特定の文字で終わる文字列の数を数えなさい。
次の文字列データの中で重複する文字列を取り除きなさい。
次の文字列データの中で特定の文字列を別の文字列に置き換えなさい。
次の文字列データの中で最も長い単語を抽出しなさい。
次の文字列データの中で最も短い単語を抽出しなさい。
次の文字列データの中で特定の長さの単語を抽出しなさい。
次の文字列データを逆順に並び替えなさい。
次の文字列データの中で単語数を数えなさい。
次の文字列データの中で特定の単語が出現する回数を数えなさい。
次の文字列データを単語ごとに分割しなさい。
次の文字列データをカンマで分割しなさい。
次の文字列データを空白で分割しなさい。
次の文字列データを特定の文字でトリミングしなさい。
次の文字列データの中で特定の文字列を削除しなさい。
次の文字列データを逆にして表示しなさい。
次の文字列データの中で特定の位置の文字を抽出しなさい。
次の文字列データを特定の文字で区切って配列に変換しなさい。
次の文字列データの中で特定の文字を含むかどうかを確認しなさい。
次の文字列データを連結しなさい。
次の文字列データの長さを求めなさい。
次の文字列データの各文字のASCIIコードを求めなさい。
次の文字列データの中で特定のサブ文字列の位置を求めなさい。
次の文字列データを特定の文字列で分割しなさい。
次の文字列データを特定の文字で結合しなさい。
次の文字列データの中で特定の文字列が含まれる位置をすべて抽出しなさい。
次の文字列データを正規表現を用いてフィルタリングしなさい。
次の文字列データを特定のフォーマットに変換しなさい。
次の文字列データの中で特定の文字列のインデックスを取得しなさい。
次の文字列データをパスカルケースに変換しなさい。
次の文字列データをキャメルケースに変換しなさい。
次の文字列データをスネークケースに変換しなさい。
次の文字列データをケバブケースに変換しなさい。
次の文字列データをコンマ区切りに変換しなさい。
次の文字列データを特定の長さにパディングしなさい。
次の文字列データを特定の文字で埋めなさい。
次の文字列データを特定の位置で挿入しなさい。
次の文字列データの中で最も長い共通部分を抽出しなさい。
次の文字列データの中で最も短い共通部分を抽出しなさい。
次の文字列データをHTMLエンコードしなさい。
次の文字列データをHTMLデコードしなさい。
次の文字列データをURLエンコードしなさい。
次の文字列データをURLデコードしなさい。
次の文字列データをBase64エンコードしなさい。
次の文字列データをBase64デコードしなさい。
次の文字列データを特定のパターンでフィルタリングしなさい。
次の文字列データを暗号化しなさい。
次の文字列データを復号化しなさい。
次の文字列データの中で重複する単語を削除しなさい。
次の文字列データを正規表現でマッチする部分を抽出しなさい。
次の文字列データを特定の形式の日付に変換しなさい。
次の文字列データを整数に変換しなさい。
次の文字列データを浮動小数点数に変換しなさい。
次の文字列データをブール値に変換しなさい。
次の文字列データをJSONに変換しなさい。
次の文字列データをXMLに変換しなさい。
次の文字列データをCSV形式に変換しなさい。
次の文字列データを特定の列でCSV形式に変換しなさい。
次の文字列データを特定の単語でフィルタリングしなさい。
次の文字列データを特定の文字列で始まるかどうかを確認しなさい。
次の文字列データを特定の文字列で終わるかどうかを確認しなさい。
次の文字列データの中で一致するパターンを置き換えなさい。
次の文字列データを特定の長さにトリミングしなさい。
次の文字列データを特定の文字でパディングしなさい。
次の文字列データを特定の条件でフィルタリングし、新しい文字列を生成しなさい。
次の文字列データを各文字ごとに分割しなさい。
次の文字列データを特定の文字で分割し、新しい配列を生成しなさい。
次の文字列データを特定のサブ文字列で分割しなさい。
次の文字列データを一つの文字列に連結しなさい。
次の文字列データを正規表現で置き換えなさい。
次の文字列データを特定の文字で始まるかどうかをチェックしなさい。
次の文字列データを特定の文字列で終わるかどうかをチェックしなさい。
次の文字列データの中で最初に出現する特定の文字列を見つけなさい。
次の文字列データの中で最後に出現する特定の文字列を見つけなさい。
次の文字列データを特定の文字列で囲みなさい。"""

str_commands=str_commands.split("\n")
num_commands=num_commands.split("\n")

import joblib
import random
import string
title_list=joblib.load("title_list.joblib")



def get_random_keyword():
    return random.choice(title_list)


def random_algorithm1():
    cmd=random.choice(str_commands)
    keywords=[get_random_keyword() for i in range(random.randint(4,10))]
    keywords=",".join(keywords)
    problem=f"""・タスクを生成しなさい｡
・指示のキーワード: {cmd}
・フォーマットは厳守すること
・用いるキーワード: {keywords}

[フォーマット]
#問題:
#回答:"""

    return problem


# %%
def random_algorithm2():
    classes=["大学院","大学","専門学校"]
    class_=random.choice(classes)
    genres=["算数","数学",]
    genre=random.choice(genres)

    keywords=get_random_keyword()
    random_ints=[random.randint(-100,100) for _ in range(random.randint(4,10))]
    random_floats=[random.uniform(-1000,1000) for _ in range(random.randint(4,10))]
    #ランダムな桁で四捨五入
    keta=random.randint(1,6)
    random_floats=[round(num,keta) for num in random_floats]
    length = random.randint(1, 6)

    random_numbers=random.choice([random_ints,random_floats,])
    num_strings=[str(num) for num in random_numbers]
    num_keywords=",".join(num_strings)

    cmd=random.choice(num_commands)
    
    problem=f"""・タスクを生成しなさい｡
・フォーマットは厳守すること
・タスクに応じ､数値はランダムに追加したり､表,csv, jsonなどのデータを生成すること
・指示のキーワード: {cmd}
・用いる数字: {num_keywords}

[フォーマット]
#問題:
#回答:"""

    return problem

print(random_algorithm2())


# %%
def random_algorithm():
    return random.choice([
        random_algorithm1(),random_algorithm2(),

                          ])
random_algorithm()

# %%

# %%
# ライブラリの自動リロード
from tqdm import tqdm
import random
import pandas as pd
from src.GGUFBot import GGUFBot
from datasets import load_dataset
import json
from datetime import datetime
import joblib
import random
import os

dir_name="data_random_algorithm"
os.system(f"mkdir {dir_name}")
current_time_no_symbols = datetime.now().strftime(
    "%Y-%m-%d %H:%M:%S").replace("-", "").replace(":", "").replace(" ", "")
out_path = f"{dir_name}/completion_records{current_time_no_symbols}.jsonl"

print("init model")
#tsubame
bot = GGUFBot(model_path="../../model/Mixtral-8x22B-Instruct-v0.1.Q8_0-00001-of-00004.gguf",
              max_new_tokens=4000, n_ctx=4000, n_gpu_layers=500)

#bot = GGUFBot(model_path="../ChatServer/model/Mixtral-8x22B-Instruct-v0.1.Q5_K_M-00001-of-00004.gguf",
#              max_new_tokens=4000, n_ctx=4000, n_gpu_layers=500)
print("fin initiating model")


while True:
    record = {}
    record["database"] = "random"
    prompt=random_algorithm()
    try:
        a = bot.ask(prompt)
        if a == "":
            continue
        record["autogen_text"] = a
    except Exception as e:
        print(record, e)
        continue

    print(record)
    with open(out_path, 'a') as f:
        f.write(json.dumps(record, ensure_ascii=False)+'\n')




